# -*- coding: utf-8 -*-
"""CS 676 - Project 2 - Deliverable 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u8QL9vwEhs9ze_XZSn9Wqqz-zyFr_xXz
"""

# ==========================================================
# CELL 1: SETUP & INSTALLATION
# ==========================================================
# @title 🛠️ Run this cell to install TinyTroupe and set API Key

print("Installing TinyTroupe from GitHub...")
# We must install directly from the source
!pip install -q git+https://github.com/microsoft/TinyTroupe.git
print("✅ TinyTroupe installed.")

import json
import os
import textwrap
from pprint import pprint
from tinytroupe.agent import TinyPerson
from tinytroupe.environment import TinyWorld
from tinytroupe.factory import TinyPersonFactory

# --- Colab Form for API Key ---
OPENAI_API_KEY = ""  # @param {type:"string"}
if OPENAI_API_KEY:
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    print("✅ OpenAI API Key has been set.")
else:
    print("⚠️ Please paste your OpenAI API Key into the form field and re-run this cell.")
    # Stop the script if the key is not entered
    # We'll check this again in the main run cell

# --- Helper Function ---
def print_wrap(role, text):
    """Helper function to format and print chat text nicely."""
    wrapped_text = textwrap.fill(text, width=90, replace_whitespace=False)
    print(f"\n[{role}]:\n{wrapped_text}\n")

# ==========================================================
# CELL 2: PERSONA DEFINITIONS
# ==========================================================
# @title 🎭 Run this cell to define agent personas

# --- GREETER Persona Template (Your exact definition) ---
greeter_persona = {
    "type": "TinyPerson",
    "persona": {
        "name": "Greeter",
        "occupation": {
            "title": "Expert in TinyTroupe",
            "description": "You are knowledgeable about the TinyTroupe package and agent creation. Your role is to ask the user 1-2 questions to understand their needs and then generate a JSON config for the next agent."
        },
        "personality": {
            "traits": [
                "Helpful",
                "Concise",
                "Friendly",
                "Collaborative"
            ]
        }
    }
}

# --- SPECIALIST Persona Template (Matching your style) ---
specialist_persona = {
    "type": "TinyPerson",
    "persona": {
        "name": "Specialist",
        "occupation": {
            "title": "Creative Problem Solver",
            "description": "You are an expert in brainstorming and agentic design. You are called in to help a 'Solver' agent. Your goal is to collaborate with the Solver to find a creative solution for the user's problem. You provide guidance and new perspectives."
        },
        "personality": {
            "traits": [
                "Creative",
                "Analytical",
                "Collaborative",
                "Insightful"
            ]
        }
    }
}

print("✅ Agent persona templates are defined.")

# ==========================================================
# CELL 3: RUN THE 3-LAYER PROTOTYPE
# ==========================================================
# @title 🚀 Run this cell to start the interactive chat

def run_prototype():
    # Clear existing agents for re-running the cell
    TinyPerson.all_agents = {}

    # --- Check for API Key ---
    if "OPENAI_API_KEY" not in os.environ or not os.environ["OPENAI_API_KEY"]:
        print("🚨 ERROR: API Key not found. Please run Cell 1 and enter your OpenAI API Key.")
        return

    # --- LAYER 1: The Greeter ---
    print_wrap("System", "Layer 1 Initialized. Connecting to Greeter...")
    # Create the agent using your new definition
    greeter_agent = TinyPerson(
        name=greeter_persona["persona"]["name"]
    )


    print_wrap(greeter_agent.name, "Hello! I'm an expert in TinyTroupe. To help you, I just need to ask 1-2 questions. What are you hoping to accomplish today?")

    # Simple, non-looping interaction for the prototype
    user_input = input("You > ")
    print_wrap("You", user_input)

    # --- Bypass Greeter JSON generation and use a modified Specialist persona ---
    print_wrap("System", "Bypassing Greeter JSON generation and using a modified Specialist persona for the Solver.")
    solver_config = {
        "type": "TinyPerson",
        "persona": {
            "name": "Solver",  # Changed name
            "occupation": {
                "title": "Creative Finance and Money Management Assistant", # Changed title
                "description": f"You are an expert in finance and money management, configured based on the user's request: '{user_input}'. Your goal is to provide helpful information and guidance on managing money and finance." # Changed description
            },
            "personality": {
                "traits": [ # Keeping Specialist traits, or could customize further
                    "Creative",
                    "Analytical",
                    "Collaborative",
                    "Insightful",
                    "Helpful", # Added helpful trait
                    "Knowledgeable" # Added knowledgeable trait
                ]
            }
        }
    }
    print_wrap("System", f"Solver config generated:\n{json.dumps(solver_config, indent=2)}")


    # --- LAYER 2: The Solver ---
    print_wrap("System", "Layer 2 Initialized. Creating Solver agent...")
    factory = TinyPersonFactory(context="A technical support session for a Python developer")

    # Dynamically create the Solver using the config
    solver_agent = factory.generate_person(f"Create a solver agent with this spec: {solver_config}")

    # Add check for solver_agent creation
    if solver_agent is None:
        print_wrap("System", "Failed to create Solver agent using TinyPersonFactory. Please check TinyTroupe documentation for correct generate_person usage with config.")
        return


    print_wrap(solver_agent.name, "Hello. I've been configured based on your request. How can I help you proceed?")

    # --- Continuous conversation loop ---
    while True:
        user_input = input("You > ")
        print_wrap("You", user_input)

        # Check for stop command
        if user_input.lower() in ["stop", "quit", "end"]:
            print_wrap("System", "Ending session.")
            break

        # --- Check for Escalation Trigger ---
        if "brainstorm" in user_input.lower():
            print_wrap(solver_agent.name, "That's an excellent idea. This requires a deeper, more creative approach. I'll bring in a specialist to help us brainstorm.")

            # --- LAYER 3: The Brainstorming ---
            print_wrap("System", "Layer 3 Initialized. Creating Specialist and Brainstorming World...")

            # Create the specialist using the new persona
            specialist_agent = TinyPerson(
                name=specialist_persona["persona"]["name"]
            )


            # Create the "chat room"
            brainstorm_world = TinyWorld(
                name="Brainstorm-Room",
                agents=[solver_agent, specialist_agent]
            )

            topic = f"The user needs help with '{user_input}'. Let's brainstorm a creative and robust solution. {solver_agent.name}, you can provide the context, and {specialist_agent.name}, please provide the expert insight."
            print_wrap("System", f"Giving agents the topic: {topic}")

            brainstorm_world.broadcast(topic)

            print("\n--- 🧠 Agents are brainstorming... (This may take a moment) ---")
            # Run the simulation for 4 turns (2 turns each)
            brainstorm_world.run(4)
            print("--- ✅ Brainstorm Complete. Here is the transcript: ---\n")

            # Print the agent-to-agent conversation
            history = brainstorm_world.get_conversation_history()
            for message in history:
                if message["sender_name"] != "WORLD":
                    print_wrap(message['sender_name'], message['content'])
            # After brainstorming, return to the Solver conversation loop
            print_wrap("System", "Returning to the main conversation with the Solver.")

        else:
            # If no escalation, just get a simple answer from the Solver
            solver_response = solver_agent.listen_and_act(user_input)
            if solver_response: # Add this check
                print_wrap(solver_agent.name, solver_response)
            else:
                print_wrap("System", f"{solver_agent.name} did not provide a response.") # Optional: Add a message if no response

    print_wrap("System", "Session complete.")

# --- Run the full prototype ---
run_prototype()